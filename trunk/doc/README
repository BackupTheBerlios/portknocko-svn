PORTKNOCKO PROJECT
==================

The PortKnocko project is composed of two parts: an iptables module (user space) 
and a netfilter module (kernel space). The first one is an iptables extension, 
and the other one is a netfilter extension.

Both modules are used to implement the "port knocking" firewalling technique. For 
instance, this can be used to avoid brute force attacks to ssh or ftp services.


INSTALLATION
------------

Anonymous SVN Access via SVN:
---------------------------------------------------
svn checkout svn://svn.berlios.de/portknocko/trunk 
---------------------------------------------------

-------------------------------------
$ cd portknocko
$ ~/portnocko/cd iptables
$ ~/portnocko/iptables/make clean
$ ~/portnocko/iptables/make
$ ~/portnocko/iptables/make install

$ cd ../kernel
$ ~/portnocko/kernel/make clean
$ ~/portnocko/kernel/make
$ ~/portnocko/kernel/make install

$ depmod -Ae
------------------------------------

[icons=None, caption="Note"]
NOTE: if you use: "insmod ./ipt_pknock.ko", first you should do "modprobe cn" to 
load the netlink connector.


USAGE:
------

We will show you some different possibilites on how to use this module:

1) "the simplest way", one rule portknocking:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
--------------------------------------------------------------------
$ iptables -P INPUT DROP
$ iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT

$ iptables -A INPUT -p tcp -m state --state NEW 
	-m pknock --knockports 2002,2001,2004 --name SSH 
	-m tcp --dport 22 -j ACCEPT
--------------------------------------------------------------------

----------------------------------------
$ telnet yourserver 2002 # first knock
$ telnet yourserver 2001
$ telnet yourserver 2004 # last knock

$ ssh user@yourserver
----------------------------------------

[icons=None, caption="Note"]
NOTE: All knocks and traffic must be TCP packets.

options:
--------

--------------------------------------------------------------------
[--time seconds]	-> max time between knocks.
[--strict] 		-> if the peer fails one knock during the 
			sequence, must start over.
--------------------------------------------------------------------	


2) "the crypt way", hmac auth with two iptables rules:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

you can achive nonreplayable and nonspoofable.

-----------------------------------------------------------------------------
$ iptables -P INPUT DROP
$ iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT

$ iptables -A INPUT -p udp -m state --state NEW 
	-m pknock --knockports 2000 --name SSH
	--opensecret your_opensecret --closesecret your_closesecret 
	-j DROP
$ iptables -A INPUT -p tcp -m state --state NEW 
	-m pknock --checkip --name SSH -m tcp --dport 22 -j ACCEPT
-------------------------------------------------------------------------------

this way you must send the UDP knock packet with a payload containing a md5 
(or sha256) hmac digest:

	md5_hmac(your_opensecret, your_ip, epoch_min)

[icons=None, caption="Note"]
NOTE: "epoch_min" is the UTC min since January 1st 1970 (unix time), so you must 
keep you hardware clock sync. You can do it this way:

---------------------------------------------------------------------------	
$ rdate time-a.nist.gov # this will set your system clock
$ /sbin/hwclock --systohc --utc # this will set your hardware clock to UTC
---------------------------------------------------------------------------

after knock is accepted, you can begin the TCP traffic through port 22. When you 
finish, close the door (see the example below) to avoid others come after you and 
use your same IP to log-in.

We provide you a client for knocking the crypt way:

------------------------------------------------------
$ cd test
$ util/knock.sh <IP src> <PORT dst> <secret> <IP dst>
------------------------------------------------------

e.g: 
-------------------------------------------------
$ ~/util/knock.sh 127.0.0.1 2000 your_opensecret
-------------------------------------------------

after you finish using the service you should "close the door":

e.g: 
--------------------------------------------------
$ ~/util/knock.sh 127.0.0.1 2000 your_closesecret
--------------------------------------------------

[icons=None, caption="Note"]
NOTE: Remeber that these are One Time Password, so you can not re use the same 
hmac, letting you knock just once per minute (cause the epoch_min).


COMUNICATION WITH THE USERSPACE:
--------------------------------

In other port knocking implementations, there is a server that periodically 
looks up the firewall logs for a correct sequence of port knocks. When it is 
found, the server usually set a new iptable rule. 

A great possibility would be if the server just listens and receives a msg 
when something interesting happens. If this would be possible, surely it must 
simplify the architecture of the server and make it more efficient.

Thanks to netlink sockets, a message from this kernel module is sent to the 
userspace each time a peer match a knock sequence.

So for example you could have a server listening in the userspace and when 
someone matches the sequence, the server receives a msg allowing you to do 
whatever you want. e.g: you could start a webserver, add the peer to a whilelist, 
etc. everything in a smooth and efficient way.

step by step:

1) edit ipt_pknock.h and set #define NETLINK_MSG 1
2) compile and load the module
3) load the server. There is a minimal userspace implementation in 
experiments/netlink_broadcast that prints a msg each time someone matches the 
sequence.


TESTS: (be careful, it will erase your loaded iptables rules)
-------------------------------------------------------------

If you are a developer you want to run these while you refactor the code

---------------------------------------------
$ ~/portknocko/cd test/
$ ~/portknocko/test/./testrunner.sh all.test
---------------------------------------------

[icons=None, caption="Note"]
NOTE: we use a modified hping version that does not wait 1 sec for each sent packet 
as the original version, so tests can run much faster.
