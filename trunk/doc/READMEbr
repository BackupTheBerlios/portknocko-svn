PROJECTO PORTKNOCKO
===================

O projeto de PortKnocko é composto de duas porções: um módulo do iptables (espaço do usuário) e um módulo do netfilter (espaço da kernel). O primeiro é uma extensão do iptables, e o segundo é uma extensão do netfilter.

Ambos módulos são usados para executar Port Knocking, um sistema sigiloso para o autenticação da rede através dos portos fechados, e o SPA (Simple Packet Authentication). Por exemplo, isto pode ser usado para evitar ataques da força brute ao ssh ou aos serviços do ftp.


INSTAÇ&Atilde;O
---------------

Acesso Anonymous ao repositorio atrav&eacute;s de SVN:
---------------------------------------------------
svn checkout svn://svn.berlios.de/portknocko/trunk 
---------------------------------------------------

-------------------------------------
# cd portknocko
# ~/portknocko/cd iptables
# ~/portknocko/iptables/make clean
# ~/portknocko/iptables/make
# ~/portknocko/iptables/make install

# cd ../kernel
# ~/portknocko/kernel/make clean
# ~/portknocko/kernel/make
# ~/portknocko/kernel/make install

# depmod -Ae
------------------------------------

[icons=None, caption="Note"]
NOTA: se você usa: “insmod ./ipt_pknock.ko”, primeiramente você teria que fazer “modprobe cn” 
para carregar o conector do netlink.


USO:
-----

Nós mostraremos os usos possíveis deste módulo:

1) “a maneira mais simple”, portknocking de uma régua:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
--------------------------------------------------------------------
# iptables -P INPUT DROP
# iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT

# iptables -A INPUT -p tcp -m state --state NEW 
	-m pknock --knockports 2002,2001,2004 --name SSH 
	-m tcp --dport 22 -j ACCEPT
--------------------------------------------------------------------

----------------------------------------
$ telnet yourserver 2002 # first knock
$ telnet yourserver 2001
$ telnet yourserver 2004 # last knock

$ ssh user@yourserver
----------------------------------------

[icons=None, caption="Note"]
NOTA: Todos os “knocks” e tráfego devem ser pacotes do TCP. 

opções:
-------

--------------------------------------------------------------------
[--time seconds]        -> tempo máximo entre knocks.
[--strict]              -> se falha um knock do peer quando tenta 
			uma seqüência do portos, deve começar outra 
			vez. 
--------------------------------------------------------------------	

2) “a maneira SPA”, autenticação hmac com dois réguas do iptables:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Com este você pode conseguir evitar o replicação e spoofing dos pacotes.

-----------------------------------------------------------------------------
# iptables -P INPUT DROP
# iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT

# iptables -A INPUT -p udp -m state --state NEW 
	-m pknock --knockports 2000 --name SSH
	--opensecret your_opensecret --closesecret your_closesecret 
	-j DROP
# iptables -A INPUT -p tcp -m state --state NEW 
	-m pknock --checkip --name SSH -m tcp --dport 22 -j ACCEPT
-------------------------------------------------------------------------------

Para esta maneira você deve emitir pacotes UDP, cujo payload contem um “sha256 
hmac digest “:

	sha256_mac(your_opensecret, your_ip, epoch_min)

[icons=None, caption="Note"]
NOTA: “epoch_min” são os minutos desde janeiro 1º 1970, assim que você deve 
manter sincronizado os relógios do servidor e de seu host. Para sincronizar os 
relógios, você pode fazer a seguinte coisa: 

Depois que os knocks são aceitados, você pode começar o tráfego do TCP através 
do porto 22. Quando você termina, fecha a porta (ver o exemplo abaixo) para 
evitar que aqueles que usam seu mesmo IP possam usar o serviço ssh.

Nós fornecemos um cliente para fazer o knocking da maneira SPA:
---------------------------------------------------------------------------	
# rdate time-a.nist.gov 	# this will set your system clock
# /sbin/hwclock --systohc --utc # this will set your hardware clock to UTC
---------------------------------------------------------------------------

Luego de que el "knock" es aceptado, puedes comenzar el tráfico TCP através
del puerto 22. Cuando termines, cierra la puerta (ver ejemplo abajo) para evitar
que los que usen tu misma ip puedan utilizar el servicio ssh.

Nosotros proveemos un cliente para hacer el knocking de la forma SPA:

------------------------------------------------------
# cd test
# util/knock.sh <IP src> <PORT dst> <secret> <IP dst>
------------------------------------------------------

[icons=None, caption="Note"]
NOTA: Você deve ter instalado o pacote python-crypto. 

exemplo: 
---------------------------------------------------
# ~/util/knock.sh 192.168.0.1 2000 your_opensecret
---------------------------------------------------

Depois que você termina usar o serviço você teria “fechar a porta”:

exemplo:
----------------------------------------------------
# ~/util/knock.sh 192.168.0.1 2000 your_closesecret
----------------------------------------------------

[icons=None, caption="Note"]
NOTA: Recorda que estas são contra-senhas somente do uso único, assim que 
você não pode usar o mesmo hmac. Você somente pode emitir um pacote (com o 
segredo) por minuto. Depois desse minuto, hmac expira. Dentro desse tempo, 
o módulo aceitará só um único pacote com o mesmo secreto. Se fosse tentado 
replicar este pacote, o módulo rejeitá-lo-ia.

Caso que você está sendo NATado, substitui somente <IP src> pela IP pública.

O protocolo da segurança usado neste módulo é baseado em uma implementação do espaço do usuário chamada Tumbler: http://tumbler.sourceforge.net/

COMUNICAÇÃO COM O ESPAÇO DO USUÁRIO:
-------------------------------------

Em outras implementações do port knocking, existe um servidor que procure periódicamente nos 
registros do firewall a seqüência correta de portos golpeados (knocks). Quando a encontra, 
servidor cría réguas novas dos iptables.

Uma alternativa muito boa seria se o servidor somente escutasse e recebesse uma mensagem, 
quando alguém está interessado em algo.

Pelos sockets netlink, uma mensagem de um módulo do kernel pode ser emitido a uma aplicação 
do espaço do usario, sempre que um peer (ou host) golpeia a seqüência correta dos portos.

Assim você poderia ter um servidor (no espaço do usuário) que espera conexãos e quando alguém 
golpeia os portos específicos, o servidor pode receber uma mensagem do módulo do kernel 
permitiendo fazer algo. Por ex: você poderia iniciar um web server, aderir ao peer (ou ao 
host) a uma lista, etc. Alguma coisa em uma maneira eficiente.

Step-by-step:

1) Compila o módulo. 
2) Carrega o módulo: insmod ./ipt_pknock.ko nl_multicast_group=<value> 
3) Inicía o servidor. Existe uma implementação mínima no diretório que mostra a uma mensagem 
sempre que alguém golpeia a seqüência dos portos.

TESTES: (ter cuidado, isto apagará suas réguas dos iptables que você carregou)
------------------------------------------------------------------------------

Se você é um programador, após ter modificado o código do módulo você pode executar estes 
testes:

---------------------------------------------
# ~/portknocko/cd test
# ~/portknocko/test/./testrunner.sh all.test
---------------------------------------------
