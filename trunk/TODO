TODO:
-----

- For Fender. Soporte para x_tables y para IPV6.
- For Lucho. timestamp con jiffies, be careful! (ver escenarios SMP).
- For Anyone. El comportamiento --strict debería ser por defecto (si alguien hace port scanning podría quedar en estado ALLOWED). -> Gracias a Fede Roitman por la observación.
- For Fender. Con el método tradicional para hacer port knocking, existe el problema de un DoS (corregirlo).
- For Fender. Corregir el posible problema de fragmentación de memoria al recibir un ataque de DoS.


DONE:
-----

- By Lucho. GFP_ATOMIC en kmalloc cuando estamos dentro de un spin_lock
- By Lucho. Restriccion para usar el modo seguro con un solo knock.
- By Fender. request_module('sha256') para cargar el módulo sha256 al inicio del módulo pknock. Sino se puede cargar usa md5.
- By Lucho. Antes de usar el módulo pknock debe hacerse "modprobe sha256", sino el módulo pknock explota.
- By Lucho & Fender. Kernel freeze with SHA256 (crypto_alloc_tfm() issue). MD5 by default, for a while.
- By Fender. Memory leak fixed in has_secret() function.
- By Fender. Validación de parametros en espacio de kernel y espacio de usuario.
- By Lucho. SHA256 by default.
- By Fender. Kernel panic fixed.
- By Lucho. Ahora se envía un paquete con un nuevo payload (y secreto) que indica que se debe eliminar el peer de la lista de ALLOWED, esto para evitar el siguiente escenario:
	"alguien se loguea, se desloguea en el mismo minuto y otro que tome esa IP antes que corra el garbage collector puede conectarse sin necesidad de knockear (porque esa IP está como ALLOWED)".
- By Lucho. Un hmac no puede usarse más de una vez en un mismo minuto.
- By Lucho. Bug fixed: la ejecución del garbage collector se postergaba cada vez que se llamaba a match(). Ahora solo se posterga cada vez que hay un cambio en algún peer.
- By Lucho. Cada hmac tiene una validez de 1min, ahora se incorpora en el hmac el epoch minute.
- By Fender. Funcion parse() de libipt_pknock.c completa.
- By Fender & Lucho. Posibilidad de knockear con udp por ejemplo y habilitar el trafico tcp. Para esto se utilizan 2 reglas de iptables.
- By Lucho. Agregada macro hashtable_for_each()
- By Lucho. Bug fixed al setear el buffer de la regla a menos de 256 (y hacia explotar los timers).
- By Fender. Nuevo parametro 'gc_expir_time' para setear el tiempo de expiración del garbage collector.
- By Lucho. Se envía al userspace una estructura que contiene rule_name + peer_ip
- By Lucho. u32 y u_int32_t terminan siendo typedef del mismo dato de 32 bits. Usaremos u_int32_t.
- Useless. revisar read_proc() y mostrar la lista de puertos y su estado.
- By Lucho. Comunicación kernel/user con "netlink"
- By Lucho. Pasar el password en la regla de iptables.
- By Lucho & Fender. Timer problem fixed.
- By Lucho. --strict option added so the peer must match the exact sequence without any miss
- By Lucho. some memory leaks fixed
- By Fender. Portknocking en una regla.
- By Fender. Macros de función a funciónes inline.
- By Lucho. auth with hmac, --secure option
- By Lucho. hash tables for peers and rules.
- By Fender. Entrada en /proc/net/ipt_pknock para ver, por regla, el estado de los peers.
- By Fender. Implementación de un garbage collector para eliminar estados de peers automáticamente.
- By Fender. Tiempo max permitido para golpear cada puerto especificado.
- By Fender. Implementación de listas a traves de la linux/list.h.
- By Fender. Implementación de portknocking como una extension de netfilter y
  su correspondiente módulo iptables para espacio de usuario.
