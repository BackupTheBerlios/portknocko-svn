Temas para la presentacion:
===========================


- Intro: Necesidad

	* servicios(puertos) accesibles desde afuera, pero no públicos.
    * ej: SSH, cpanels webs.
    * experiencia: log spam => disk full [& brokers example: 50MB semanales].
    * experiencia: previa con iptables


- Que es:

	* sistema "sigiloso" que utiliza la
	  comunicacion a través de puertos cerrados para autorizar el uso de servicios(puertos).
	* "sigiloso" porque no hay respuesta.
    * inmunidad para reconocer dichos servicios con port scanning.
	* secreto compartido (secuencia de puertos knockeados).
    * Mostar tipico grafico de secuencia.


- Que Resuelve:

	* evita ataques por fuerza bruta
	* evita log spam
	* ¡evita vulnerabilidades del servicio!
    

- Nuestra Solucion:

    * extension de netfilter + iptables.
    * aclarar que es netfilter e iptables (rol de cada uno).
    * que tareas se hacen en userspace y en kernelspace (flujo desde setear la regla hasta llegar al kernel).
    
    
- Escenario 1:

	* TCP
	* Secuencia de "knocks"
	* secreto compartido.
	* peers, rules.
	* ejemplo de iptables en una sola regla (con las posibles opciones).
    * statefull
	* netfilter


- Cuestiones del Escenario 1:

	* sniffing => replay
    
    
- Escenario 2:
    
    We assume that an adversary can:

    * monitor and intercept all network trafc
    * send packets with arbitrary source addresses
    * replay captured network traffic

	* autenticamos con el payload en un solo msj UDP
	* payload: hmac(ipsrc + secreto)
    * que es un hmac?
	* no pueden hacer replay desde otra ipsrc
    * podrian al hacer replay, abrir la puerta a otra IP.
    
    
- Cuestiones del Escenario 2:

	* roban nuestra identidad (ipsrc), podrian replicar el open knock.
	* solucion: hmac(ipsrc + secreto + epoch_min)
	* validez de un solo minuto
    * clock sync
	* no acepto repeticion dentro de ese minuto


- Portknocking no es una solución a:

	* Man in the Middle, con capacidad de suprimir trafico, podria dejar pasar el open knock, luego bloquear nuestro trafico y tomar nuestra identidad. El problema es que en portknocking no hay una asociación entre autenticacion y conexion.
	* integridad y confidencialidad de la comunicación => VPN


- Utilidad del userspace message.

	* Arquitectura de otras implementaciones de port knocking (asincrono)
	* Nuestra arquitectura (sincrono)
	* mensajes kernelspace -> userspace


- Anecdotas de programación.

	* iptables
	* netfilter
	* garbage collector
	* hash tables
	* mini-framework para testing


- Conclusion

	* ...
	* destino: netfilter repository
	* help from comunidad mendocina? beta testers?
