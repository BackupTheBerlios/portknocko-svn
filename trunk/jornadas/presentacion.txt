Temas para la presentacion:
===========================

[FEDE]
- Intro: Necesidad

	* servicios(puertos) accesibles desde afuera, pero no públicos.
    * ej: SSH, cpanels webs.
    * experiencia: log spam => disk full [& brokers example: 50MB semanales].
    * experiencia: previa con iptables


- Que es Portknocking:

	* técnica "sigilosa" que utiliza la
	  comunicacion a través de puertos cerrados para autorizar el uso de servicios(puertos).
	* "sigiloso" porque no hay respuesta.
    * inmunidad para reconocer dichos servicios con port scanning.
	* secreto compartido (secuencia de puertos knockeados).
    * Mostar tipico grafico de secuencia.


- Que Resuelve:

	* evita ataques por fuerza bruta
	* evita log spam
	* ¡evita vulnerabilidades del servicio!


- Nuestra Solucion:

    * extension de netfilter + iptables.
    * aclarar que es netfilter e iptables (rol de cada uno).
    * que tareas se hacen en userspace y en kernelspace (flujo desde setear la regla hasta llegar al kernel).
    
    
- Escenario 1:

	* TCP
	* Secuencia de "knocks"
	* secreto compartido
	* peers, rules
	* ejemplo de iptables en una sola regla (con las posibles opciones)
    * statefull
	* netfilter

[LUCHO]
- Cuestiones del Escenario 1:

    We assume that an adversary can:

    * monitor and intercept all network traffic
    * send packets with arbitrary source addresses
    * replay captured network traffic
    
    * en nuestro caso con solo hacer replay desde otra IPsrc estaría abriendo la puerta.
    
    
- Escenario 2:

	* autenticamos con el payload en un solo msj UDP
	* payload: hmac(ipsrc + secreto)
    * que es un hmac?
	* no pueden abrir el servicio desde otra ipsrc
    * podrian al repetir el msj, abrir la puerta a otra IP.
    
    
- Cuestiones del Escenario 2:

	* roban nuestra identidad (impersonation, suplantación ó spoofing de nuestra IP), podrian repetir el open knock.
    * ¿Como logro evitar cualquier tipo de replay?
    * solucion: ISO 9798-4 one-pass unilateral authentication with hmac and timestamps:
	* hmac(ipsrc + secreto + epoch_min)
	* validez de un solo minuto
    * clock sync
	* no acepto repeticion dentro de ese minuto


- Portknocking no es una solución a:

	* Man in the Middle, con capacidad de suprimir trafico, podria dejar pasar el open knock, luego bloquear nuestro trafico y tomar nuestra identidad. El problema es que en portknocking no hay una asociación entre autenticacion y conexion.
	* integridad y confidencialidad de la comunicación
    * solucion: VPN


- Utilidad del userspace message.

	* Arquitectura de otras implementaciones de port knocking (asíncrono)
	* Nuestra arquitectura (síncrono) -> mas efectiva.
	* mensajes kernelspace -> userspace
    * separacion de intereses.


[FEDE]
- Anecdotas de programación.

	* iptables
	* netfilter
	* garbage collector
[LUCHO]
	* hash tables
	* mini-framework para testing

[FEDE & LUCHO]
- Conclusion

	* ...
	* destino: netfilter repository
	* help from comunidad mendocina? beta testers?
